package th.co.krungthaiaxa.api.elife.products.igen;

import java.io.IOException;
import java.text.DecimalFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.tuple.Pair;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

import com.itextpdf.text.DocumentException;

import th.co.krungthaiaxa.api.common.utils.IOUtil;
import th.co.krungthaiaxa.api.elife.model.Insured;
import th.co.krungthaiaxa.api.elife.model.Quote;
import th.co.krungthaiaxa.api.elife.products.AbstractProductEmailService;
import static th.co.krungthaiaxa.api.elife.products.ProductType.*;
import th.co.krungthaiaxa.api.elife.products.ProductUtils;
import th.co.krungthaiaxa.api.elife.service.EmailService;
import th.co.krungthaiaxa.api.elife.utils.EmailUtil;

@Service
public class IGenEmailService extends AbstractProductEmailService {
	
	private String productId = PRODUCT_IGEN.getLogicName();
	
	@Inject
	private IGenSaleIllustrationService iGenSaleIllustrationService;
	
	@Override
	public String getEmailContentByProductId() {
		return productId;
	}

	@Override
	public void sendQuoteEmail(Quote quote) {
		
		if(LOGGER.isDebugEnabled()){
			LOGGER.debug(String.format("[%1$s] .....", "sendQuoteEmail for "+productId));
            LOGGER.debug(String.format("quote is %1$s", quote.toString()));
		}
		
		List<Pair<byte[], String>> base64ImgFileNames = EmailUtil.getDefaultImagePairs();
		List<Pair<byte[], String>> attachments = new ArrayList<>();
		try {
			attachments.add(iGenSaleIllustrationService.generatePDF(quote));
		} catch (DocumentException e) {
			LOGGER.error(e.getMessage());
		} catch (IOException e) {
			LOGGER.error(e.getMessage());
		}
		Insured mainInsured = ProductUtils.validateExistMainInsured(quote);
		emailSender.sendEmail(fromEmail, mainInsured.getPerson().getEmail(), emailQuoteSubject, getEmailQuoteContent(quote), base64ImgFileNames, attachments);
		LOGGER.info("Quote iGen email sent!");
	}

	@Override
	public String getEmailQuoteContent(Quote quote) {
        String emailContent = IOUtil.loadTextFileInClassPath(emailQuotePath);
        Integer taxDeclared = (quote.getInsureds().get(0).getDeclaredTaxPercentAtSubscription()==null?0:quote.getInsureds().get(0).getDeclaredTaxPercentAtSubscription());
        return emailContent.replace("%1$s", quote.getCreationDateTime().plusYears(543).format(formatter))
                .replace("%2$s", "'" + getLineURL() + "fatca-questions/" + quote.getQuoteId() + "'")
                .replace("%3$s", messageSource.getMessage("payment.mode."+quote.getPremiumsData().getFinancialScheduler().getPeriodicity().getCode().toString(), null, thLocale))
                .replace("%4$s", setMoneyFormat(0.0))
                .replace("%5$s", setMoneyFormat(0.0))
                .replace("%6$s", setMoneyFormat(0.0))
                .replace("%7$s", setMoneyFormat(0.0))
                .replace("%8$s", setMoneyFormat(0.0))
                .replace("%9$s", setMoneyFormat(0.0))
                .replace("%10$s", setMoneyFormat(0.0))
                .replace("%11$s", String.valueOf(taxDeclared))
                .replace("%12$s", setMoneyFormat(0.0))
                .replace("%13$s", setMoneyFormat(0.0))               
                .replace("%14$s", "'" + getLineURL() + "'")
                .replace("%15$s", "'" + getLineURL() + "fatca-questions/" + quote.getQuoteId() + "'")
                .replace("%16$s", "'" + getLineURL() + "quote-product/line-iProtect" + "'");
	}

	

}
